import random
import pygame

COLOR_WALL = (30, 30, 30)
COLOR_PATH = (240, 240, 240)

class Maze:
    def __init__(self, width, height, cell_size):
        """
        width, height ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫
        cell_size ‚Äî —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        """
        self.width = width
        self.height = height
        self.cell_size = cell_size
        self.grid = [[1 for _ in range(width)] for _ in range(height)]
        self._generate_maze()
        self._open_borders()  # üëà –≤–æ—Ç –∑–¥–µ—Å—å –º–∞–≥–∏—è

    def _generate_maze(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –º–µ—Ç–æ–¥–æ–º DFS."""
        stack = []
        start_row, start_col = 1, 1
        self.grid[start_row][start_col] = 0
        stack.append((start_row, start_col))

        dirs = [(-2, 0), (2, 0), (0, -2), (0, 2)]

        while stack:
            row, col = stack[-1]
            random.shuffle(dirs)
            carved = False
            for dr, dc in dirs:
                new_r, new_c = row + dr, col + dc
                if 1 <= new_r < self.height - 1 and 1 <= new_c < self.width - 1:
                    if self.grid[new_r][new_c] == 1:
                        self.grid[row + dr // 2][col + dc // 2] = 0
                        self.grid[new_r][new_c] = 0
                        stack.append((new_r, new_c))
                        carved = True
                        break
            if not carved:
                stack.pop()

    def _open_borders(self):
        """–î–µ–ª–∞–µ—Ç –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –ø–æ –∫—Ä–∞—è–º –ø—Ä–æ—Ö–æ–¥–∏–º—ã–º–∏ (0)."""
        for x in range(self.width):
            self.grid[0][x] = 0               # –≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            self.grid[self.height - 1][x] = 0 # –Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞

        for y in range(self.height):
            self.grid[y][0] = 0               # –ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
            self.grid[y][self.width - 1] = 0  # –ø—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞

    def draw(self, screen):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç."""
        for row in range(self.height):
            for col in range(self.width):
                x, y = col * self.cell_size, row * self.cell_size
                color = COLOR_WALL if self.grid[row][col] == 1 else COLOR_PATH
                pygame.draw.rect(screen, color, (x, y, self.cell_size, self.cell_size))

    def is_wall(self, x, y):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–µ—Ç–∫–∞ —Å—Ç–µ–Ω–æ–π –ø–æ –ø–∏–∫—Å–µ–ª—å–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º."""
        col = x // self.cell_size
        row = y // self.cell_size
        if 0 <= row < self.height and 0 <= col < self.width:
            return self.grid[row][col] == 1
        return True  # –≤—Å—ë –≤–Ω–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ ‚Äî —Å—Ç–µ–Ω–∫–∞

    def get_free_cells(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–µ—Ç–æ–∫-–ø—Ä–æ—Ö–æ–¥–æ–≤ (0)."""
        for y in range(self.height):
            for x in range(self.width):
                if self.grid[y][x] == 0:
                    yield (x, y)
